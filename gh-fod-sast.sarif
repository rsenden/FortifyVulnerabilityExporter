{
  "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "Fortify on Demand",
        "version" : "SCA 22.1.0.0166; Rulepack 2022.2.0.0008",
        "rules" : [ {
          "id" : "115888814",
          "shortDescription" : {
            "text" : "Unreleased Resource: Streams"
          },
          "fullDescription" : {
            "text" : "The function MultiOutputStream() in MultiOutputStreamFactory.java sometimes fails to release a system resource allocated by createFileOutputStream() on line 79.The program can potentially fail to release a system resource."
          },
          "help" : {
            "text" : "The program can potentially fail to release a system resource.\n\nIn this case, there are program paths on which the resource allocated in MultiOutputStreamFactory.java on line 79 is not released.\n\nResource leaks have at least two common causes:\n\n- Error conditions and other exceptional circumstances.\n\n- Confusion over which part of the program is responsible for releasing the resource.\n\nMost unreleased resource issues result in general software reliability problems. However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.\n\nExample: The following method never closes the file handle it opens. The finalize() method for FileInputStream eventually calls close(), but there is no guarantee as to how long it will take before the finalize() method will be invoked. In a busy environment, this can result in the JVM using up all of its file handles.\n\nprivate void processFile(String fName) throws FileNotFoundException, IOException {\nFileInputStream fis = new FileInputStream(fName);\nint sz;\nbyte[] byteArray = new byte[BLOCK_SIZE];\nwhile ((sz = fis.read(byteArray)) != -1) {\nprocessBytes(byteArray, sz);\n}\n}\n\n\n1. Never rely on finalize() to reclaim resources. In order for an object's finalize() method to be invoked, the garbage collector must determine that the object is eligible for garbage collection. Because the garbage collector is not required to run unless the JVM is low on memory, there is no guarantee that an object's finalize() method will be invoked in an expedient fashion. When the garbage collector finally does run, it may cause a large number of resources to be reclaimed in a short period of time, which can lead to \"bursty\" performance and lower overall system throughput. This effect becomes more pronounced as the load on the system increases.\n\nFinally, if it is possible for a resource reclamation operation to hang (if it requires communicating over a network to a database, for example), then the thread that is executing the finalize() method will hang.\n\n2. Release resources in a finally block. The code for the Example should be rewritten as follows:\n\n\npublic void processFile(String fName) throws FileNotFoundException, IOException {\nFileInputStream fis;\ntry {\nfis = new FileInputStream(fName);\nint sz;\nbyte[] byteArray = new byte[BLOCK_SIZE];\nwhile ((sz = fis.read(byteArray)) != -1) {\nprocessBytes(byteArray, sz);\n}\n}\nfinally {\nif (fis != null) {\nsafeClose(fis);\n}\n}\n}\n\npublic static void safeClose(FileInputStream fis) {\nif (fis != null) {\ntry {\nfis.close();\n} catch (IOException e) {\nlog(e);\n}\n}\n}\n\n\nThis solution uses a helper function to log the exceptions that might occur when trying to close the stream. Presumably this helper function will be reused whenever a stream needs to be closed.\n\nAlso, the processFile method does not initialize the fis object to null. Instead, it checks to ensure that fis is not null before calling safeClose(). Without the null check, the Java compiler reports that fis might not be initialized. This choice takes advantage of Java's ability to detect uninitialized variables. If fis is initialized to null in a more complex method, cases in which fis is used without being initialized will not be detected by the compiler.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/3e475492-de11-4f9c-b046-17feb1fd7546"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        } ]
      }
    },
    "results" : [ {
      "ruleId" : "115888814",
      "message" : {
        "text" : "The function MultiOutputStream() in MultiOutputStreamFactory.java sometimes fails to release a system resource allocated by createFileOutputStream() on line 79.The program can potentially fail to release a system resource."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "639932E92BCB3DC98FF857D396B8458D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "FortifyVulnerabilityExporter-spi-to/src/main/java/com/fortify/vulnexport/spi/target/vuln/consumer/to/file/stream/MultiOutputStreamFactory.java"
          },
          "region" : {
            "startLine" : 79,
            "endLine" : 79,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MultiOutputStreamFactory.java:79 - createFileOutputStream(...)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "FortifyVulnerabilityExporter-spi-to/src/main/java/com/fortify/vulnexport/spi/target/vuln/consumer/to/file/stream/MultiOutputStreamFactory.java"
                },
                "region" : {
                  "startLine" : 79
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;MultiOutputStreamFactory.java:91 - new FileOutputStream(...)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "FortifyVulnerabilityExporter-spi-to/src/main/java/com/fortify/vulnexport/spi/target/vuln/consumer/to/file/stream/MultiOutputStreamFactory.java"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;MultiOutputStreamFactory.java:91 - return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "FortifyVulnerabilityExporter-spi-to/src/main/java/com/fortify/vulnexport/spi/target/vuln/consumer/to/file/stream/MultiOutputStreamFactory.java"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MultiOutputStreamFactory.java:79 - Branch not taken: (config.getFile() == null)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "FortifyVulnerabilityExporter-spi-to/src/main/java/com/fortify/vulnexport/spi/target/vuln/consumer/to/file/stream/MultiOutputStreamFactory.java"
                },
                "region" : {
                  "startLine" : 79
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MultiOutputStreamFactory.java:80 - end scope : Resource leaked"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "FortifyVulnerabilityExporter-spi-to/src/main/java/com/fortify/vulnexport/spi/target/vuln/consumer/to/file/stream/MultiOutputStreamFactory.java"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          } ]
        } ]
      } ]
    } ]
  } ]
}