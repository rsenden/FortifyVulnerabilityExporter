/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.vulnexport;

import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.lang.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Whitelist;
import org.springframework.expression.EvaluationContext;
import org.springframework.expression.common.TemplateParserContext;
import org.springframework.expression.spel.support.StandardEvaluationContext;

import com.fortify.util.rest.json.JSONDateTimeConverter;
import com.fortify.util.spring.expression.helper.AbstractExpressionHelper;
import com.fortify.util.spring.expression.helper.IExpressionHelper;

/**
 * This {@link AbstractExpressionHelper} implementation:
 * <ul>
 *  <li>Overrides the default template expression prefix and suffix to <code>$[</code> and <code>]</code>, 
 *      to avoid conflicts with property placeholders in configuration files</li>
 *  <li>Provides access to all {@link StringUtils} methods as expression functions</li>
 *  <li>Provides access to various utility functions as defined in {@link EvaluationContextFunctions}</li> 
 * </ul>
 * @author Ruud Senden
 *
 */
public class FortifyVulnerabilityExporterExpressionHelper extends AbstractExpressionHelper {
	private static final FortifyVulnerabilityExporterExpressionHelper INSTANCE = new FortifyVulnerabilityExporterExpressionHelper();
	private FortifyVulnerabilityExporterExpressionHelper() {}

	/**
	 * @return Single instance of this class
	 */
	public static final IExpressionHelper get() {
		return INSTANCE;
	}
	
	/**
	 * @return TemplateParserContext with <code>$[</code> and <code>]</code> as expression prefix and suffix
	 */
	@Override
	protected TemplateParserContext createTemplateParserContext() {
		return new TemplateParserContext("$[", "]");
	}
	
	/**
	 * @return {@link EvaluationContext} instance from {@link #createStandardEvaluationContext()}
	 *         with added functions from {@link StringUtils} and {@link EvaluationContextFunctions}
	 */
	@Override
	protected EvaluationContext createEvaluationContext() {
		StandardEvaluationContext context = createStandardEvaluationContext();
		registerFunctions(context, StringUtils.class);
		registerFunctions(context, EvaluationContextFunctions.class);
		return context;
	}
	
	/**
	 * Register all declared methods from the given {@link Class} with the given {@link StandardEvaluationContext} 
	 */
	private void registerFunctions(StandardEvaluationContext context, Class<?> clazz) {
		for ( Method m : clazz.getDeclaredMethods() ) {
			context.registerFunction(m.getName(), m);
		}
	}

	/**
	 * This class defines various utility functions for use in expressions. 
	 * @author Ruud Senden
	 *
	 */
	public static final class EvaluationContextFunctions {
		private static final Pattern uriPartsPattern = Pattern.compile("^(?<serverUrl>(?:(?<protocol>[A-Za-z]+):)?(\\/{0,3})(?<host>[0-9.\\-A-Za-z]+)(?::(?<port>\\d+))?)(?<path>\\/(?<relativePath>[^?#]*))?(?:\\?(?<query>[^#]*))?(?:#(?<fragment>.*))?$");

		/**
		 * Abbreviate the given text to the given maximum width
		 * @param text to abbreviate
		 * @param maxWidth Maximum width
		 * @return Abbreviated text 
		 */
		public static final String abbreviate(String text, int maxWidth) {
		    return StringUtils.abbreviate(text, maxWidth);
		}
		
		/**
		 * @param html to be converted to plain text
		 * @return Formatted plain-text string for the given HTML contents
		 */
		public static final String htmlToText(String html) {
			if( html==null ) { return null; }
			Document document = Jsoup.parse(html);
			document.outputSettings(new Document.OutputSettings().prettyPrint(false));//makes html() preserve linebreaks and spacing
			document.select("br").append("\\n");
			document.select("p").prepend("\\n\\n");
			String s = document.html().replaceAll("\\\\n", "\n");
			return Jsoup.clean(s, "", Whitelist.none(), new Document.OutputSettings().prettyPrint(false));
		}
		
		/**
		 * @param html to be converted to plain text
		 * @return Single line of plain text for the given HTML contents
		 */
		public static final String htmlToSingleLineText(String html) {
			if( html==null ) { return null; }
			return Jsoup.clean(html, "", Whitelist.none());
		}
		
		/**
		 * Convenience method to throw an exception if an expression evaluates to false
		 * @param throwError true if error should be thrown, false otherwise
		 * @param msg Message for exception to be thrown
		 * @return true if throwError is false
		 * @throws IllegalStateException with the given message if throwError is true
		 */
		public static final boolean check(boolean throwError, String msg) {
			if ( throwError ) {
				throw new IllegalStateException(msg);
			} else {
				return true;
			}
		}
		
		/**
		 * @param <T> type of collections to be merged
		 * @param collections to be merged
		 * @return {@link List} containing merged contents of given collections
		 */
		@SuppressWarnings("unchecked")
		public static final <T> List<T> merge(List<T>... collections) {
			return Arrays.stream(collections).flatMap(Collection::stream).collect(Collectors.toList());
		}
		
		/**
		 * Parse the given uriString using the regular expression <code>{@value #uriPartsPattern}</code> and return 
		 * the value of the named capture group specified by the <code>part</code> parameter.
		 * @param uriString to be parsed
		 * @param part to be returned
		 * @return Specified part of the given uriString
		 */
		public static final String uriPart(String uriString, String part) {
			if ( StringUtils.isBlank(uriString) ) {return null;}
			// We use a regex as WebInspect results may contain URL's that contain invalid characters according to URI class
			Matcher matcher = uriPartsPattern.matcher(uriString);
			return matcher.matches() ? matcher.group(part) : null;
		}
		
		/**
		 * Parse the given dateString as a JSON date (see {@link JSONDateTimeConverter}, then format it using the given
		 * {@link DateTimeFormatter} pattern.
		 * @param pattern used to format the specified date
		 * @param dateString JSON string representation of date to be formatted
		 * @return Formatted date
		 */
		public static final String formatDateTime(String pattern, String dateString) {
			return formatDateTimeWithZoneId(pattern, dateString, ZoneId.systemDefault());
		}
		
		/**
		 * Parse the given dateString in the given time zone id as a JSON date (see {@link JSONDateTimeConverter}, 
		 * then format it using the given {@link DateTimeFormatter} pattern.
		 * @param pattern used to format the specified date
		 * @param dateString JSON string representation of date to be formatted
		 * @param defaultZoneId Default time zone id to be used if dateString doesn't provide time zone 
		 * @return Formatted date
		 */
		public static final String formatDateTimeWithZoneId(String pattern, String dateString, ZoneId defaultZoneId) {
			ZonedDateTime zonedDateTime = new JSONDateTimeConverter(defaultZoneId).parseZonedDateTime(dateString);
			return DateTimeFormatter.ofPattern(pattern).format(zonedDateTime);
		}
		
		/**
		 * Parse the given dateString as a JSON date (see {@link JSONDateTimeConverter}, convert it to UTC time,
		 * then format it using the given {@link DateTimeFormatter} pattern.
		 * @param pattern used to format the specified date
		 * @param dateString JSON string representation of date to be formatted
		 * @return Formatted date
		 */
		public static final String formatDateTimeAsUTC(String pattern, String dateString) {
			return formatDateTimewithZoneIdAsUTC(pattern, dateString, ZoneId.systemDefault());
		}
		
		/**
		 * Parse the given dateString as a JSON date (see {@link JSONDateTimeConverter}, convert it to UTC time,
		 * then format it using the given {@link DateTimeFormatter} pattern.
		 * @param pattern used to format the specified date
		 * @param dateString JSON string representation of date to be formatted
		 * @param defaultZoneId Default time zone id to be used if dateString doesn't provide time zone
		 * @return Formatted date
		 */
		public static final String formatDateTimewithZoneIdAsUTC(String pattern, String dateString, ZoneId defaultZoneId) {
			ZonedDateTime zonedDateTime = new JSONDateTimeConverter(defaultZoneId).parseZonedDateTime(dateString);
			LocalDateTime utcDateTime = LocalDateTime.ofInstant(zonedDateTime.toInstant(), ZoneOffset.UTC);
			return DateTimeFormatter.ofPattern(pattern).format(utcDateTime);
		}
	}
}
